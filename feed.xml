<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-03-03T18:58:43+08:00</updated><id>/feed.xml</id><title type="html">给北邮同学的技术周刊</title><subtitle>Your Site Description
</subtitle><author><name>Your Name</name></author><entry><title type="html">第一期</title><link href="/2023/03/01/welcome.html" rel="alternate" type="text/html" title="第一期" /><published>2023-03-01T00:00:00+08:00</published><updated>2023-03-01T00:00:00+08:00</updated><id>/2023/03/01/welcome</id><content type="html" xml:base="/2023/03/01/welcome.html"><![CDATA[<h2 id="开刊语">开刊语</h2>

<blockquote>
  <p>我们心目中的读者有两类，希望各位都能从周刊中得到自己想要的知识。</p>

  <p>第一类是具备基本编程能力但是渴望获得具体开发经验的读者。您现目前也许已经学习了一定量的专业知识，但是您的开发经历不满足于停留在“课程设计”这样的层面上。《给北邮人的技术周刊》中的文章会带领第一类读者深入浅出地了解现行主流开发技术；阅读《周刊》，您可以近距离了解工程师们的工作，看看您所学的专业课知识是如何在现实中运作的。</p>

  <p>第二类是正在一线进行实际开发的读者。您也许在工作之余很好奇您的同辈、后辈、前辈正在学习、研究什么。《给北邮人的技术周刊》摘选现目前仍在北邮就读或者已经从北邮毕业的作者的文章。我们尽全力为您提供具有深度思考、有技术纵深的文章，让您能够从中有所获益，让您发现更多“硬核”的北邮人。</p>

  <p align="right">《给北邮人的技术周刊》编辑部 敬上 </p>
</blockquote>

<h2 id="-第一期内容"><center> 第一期内容</center></h2>

<h3 id="正则表达式匹配-3-的倍数">正则表达式匹配 3 的倍数</h3>
<p><a href="https://blog.name1e5s.com/%E8%B6%A3%E5%91%B3%E9%97%AE%E9%A2%98/2018/07/04/Triples.html">正则表达式匹配 3 的倍数</a></p>
<ul>
  <li>Tag：【正则表达式】【形式语言与自动机】</li>
  <li>难度：⭐⭐⭐</li>
  <li>编者语：小学时我们的数学老师就告诉我们：3 的倍数的各位相加的和也是 3 的倍数。那么，如何利用这一条性质写出能够匹配 3 的倍数的正则表达式呢？这就涉及到状态机与正则表达式的互化。</li>
</ul>

<h3 id="一个项目是如何诞生的的前端项目纪实">一个项目是如何诞生的的：前端项目纪实</h3>
<p><a href="http://blog.dimpurr.com/yiban-report-17/">一个项目是如何诞生的的：前端项目纪实</a></p>
<ul>
  <li>Tag：【前端项目纪实】</li>
  <li>难度：⭐⭐</li>
  <li>编者语：技术的价值在于运用。这一篇博客记录了“校内应用年终总结数据可视化”这样一个需求从被提出到最终落地的整个开发历程。如作者所说：“我希望这个第一视角的体验能让你感受到，一个完整的前端单页面项目是怎样被设计、策划、开发出来的，中间会涉及到哪些技术、工具和流程，以及最重要的，体会到和一群有趣的人合作做一个小作品的乐趣。”这篇文章讲述了作者在大学寒假期间参与设计和开发了一个类似网易云个人年报的校内应用个性化数据年报页面的全过程。文章详细描述了从初期策划、设计稿制作、文案撰写，到前端工程开发、处理应用统计数据、利用 ECharts 绘制可视化图表，再到最后部署上线的完整过程，同时分享了在项目中收获到的经验和内心的槽点。文章内容涉及到前端技术、数据可视化等方面，适合对这些领域感兴趣的读者阅读。</li>
</ul>

<h3 id="如何在面试中筛选不做一个背题家">如何在面试中筛选/不做一个【背题家】</h3>
<p><a href="https://ipotato.me/article/66">如何在面试中筛选/不做一个【背题家】</a></p>
<ul>
  <li>Tag：【面试】【后端】</li>
  <li>难度：⭐⭐⭐</li>
  <li>编者语：面临面试的同学一定不会对“面经”、“面试八股文”感到陌生。然而在这些面试的“八股问题”的背后所对应的计算机系统的设计原理我们却不见得真正理解。如作者所说：“我希望你能在日后的学习过程中更深入的了解自己所学知识，比起知道 How 和 Why，知道 Why 才是真正对许多事物有透彻理解的终点。”</li>
</ul>

<h3 id="gui-开发中的事件驱动机制">GUI 开发中的事件驱动机制</h3>

<p><a href="https://angrychow.github.io/angrychow-blog/2023/01/23/GUI%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%9C%BA%E5%88%B6/">GUI 开发中的事件驱动机制</a></p>
<ul>
  <li>Tag：【GUI】【操作系统】</li>
  <li>难度：⭐</li>
  <li>编者语：为什么我们编写的程序一旦所有代码执行结束就退出了？应用软件是如何接收用户所发送的信号的？这一篇博客简单介绍了这两个问题的答案。</li>
</ul>

<h3 id="zfs-架构简介">ZFS 架构简介</h3>
<p><a href="https://clslaid.icu/zfs-model-intro/">ZFS 架构简介</a></p>
<ul>
  <li>Tag：【文件系统】</li>
  <li>难度：⭐⭐⭐⭐⭐</li>
  <li>
    <p>编者语：这是一篇文献阅读笔记，作者概括总结了 ZFS 文件系统的设计架构、存储数据解构等，内容非常硬核。如果你是一名电脑爱好者，那么你一定听说过ZFS。它是一种先进的文件系统，可靠性和性能都超越了传统的文件系统。在计算机存储的世界中，ZFS被誉为”存储的未来”，让人们对数据存储的理解有了一个全新的认识。</p>

    <p>ZFS的最大特点是它的数据完整性。它使用”数据校验”技术，可以检测和修复任何文件损坏或数据丢失。同时，ZFS可以将多个磁盘组合成一个巨大的存储池，并且自动地平衡数据负载。这意味着你不必担心文件丢失或损坏，因为ZFS会自动保护你的数据。</p>

    <p>ZFS的另一个令人兴奋的特点是它的”快照”功能。快照可以让你在不改变原始数据的情况下创建一个文件系统的副本。这是非常有用的，因为你可以使用快照来恢复之前的版本或者回到之前的状态。同时，ZFS的快照还可以用于备份、克隆和恢复。除此之外，ZFS还有许多其他的优点，如动态扩展、压缩、加密等等。它是一个非常灵活的文件系统，可以根据你的需求进行配置。因此，如果你是一名计算机爱好者，那么ZFS绝对值得一试！</p>
  </li>
</ul>

<h3 id="java-容器化指北">JAVA 容器化指北</h3>
<p><a href="https://mritd.com/2022/11/08/java-containerization-guide/">JAVA 容器化指北</a></p>

<ul>
  <li>Tag：【JAVA 应用部署】</li>
  <li>难度：⭐⭐⭐⭐</li>
  <li>编者语：这是一篇 JAVA 容器化技术选型的 Cookbook 教程，简单提到了 JAVA 应用容器化时可能遇到的问题 &amp; 作者的最佳实践。</li>
</ul>

<h3 id="为什么-0102--03">为什么 0.1+0.2 != 0.3</h3>
<p><a href="https://draveness.me/whys-the-design-floating-point-arithmetic/">为什么 0.1+0.2 != 0.3</a></p>
<ul>
  <li>Tag：【浮点数】【计算机系统】</li>
  <li>难度：⭐⭐</li>
  <li>编者语：计算机浮点数为什么不能精确表示十进制下可以精确表示的小数呢？这与计算机存储浮点数的规范有关。这一篇小品文深入浅出地讲解了数制与浮点数的存储方式、运算方式，希望这篇文章能够帮助你进一步理解计算机系统。这篇文章介绍了JavaScript中的一个奇怪问题：为什么0.1 + 0.2不等于0.3？同时，它探讨了浮点数计算标准（IEEE 754）的背景和浮点数的基本知识，以及这种问题发生的原因和解决方法。文章指出，浮点数的精度往往是有限的，而二进制无法在有限长度中精确地表示十进制中的小数，因此，几乎所有现代编程语言都会遇到这种问题，包括JavaScript、Java、Ruby、Python、Swift和Go等。最后，文章讨论了如何在开发中避免这种问题，以及在编写代码时需要注意的一些陷阱。本文适合对JavaScript开发、计算机底层知识等领域感兴趣的读者。</li>
</ul>

<!--more-->

<hr />

<p>If you like xLens.Space, don’t forget to give me a star. :star2:</p>

<p><a href="https://github.com/xLensSpace/xlensspace.github.io"><img src="https://img.shields.io/github/stars/xLensSpace/xlensspace.github.io?label=Stars&amp;style=social" alt="Star This Project" /></a></p>]]></content><author><name>Your Name</name></author><summary type="html"><![CDATA[开刊语 我们心目中的读者有两类，希望各位都能从周刊中得到自己想要的知识。 第一类是具备基本编程能力但是渴望获得具体开发经验的读者。您现目前也许已经学习了一定量的专业知识，但是您的开发经历不满足于停留在“课程设计”这样的层面上。《给北邮人的技术周刊》中的文章会带领第一类读者深入浅出地了解现行主流开发技术；阅读《周刊》，您可以近距离了解工程师们的工作，看看您所学的专业课知识是如何在现实中运作的。 第二类是正在一线进行实际开发的读者。您也许在工作之余很好奇您的同辈、后辈、前辈正在学习、研究什么。《给北邮人的技术周刊》摘选现目前仍在北邮就读或者已经从北邮毕业的作者的文章。我们尽全力为您提供具有深度思考、有技术纵深的文章，让您能够从中有所获益，让您发现更多“硬核”的北邮人。 《给北邮人的技术周刊》编辑部 敬上 第一期内容 正则表达式匹配 3 的倍数 正则表达式匹配 3 的倍数 Tag：【正则表达式】【形式语言与自动机】 难度：⭐⭐⭐ 编者语：小学时我们的数学老师就告诉我们：3 的倍数的各位相加的和也是 3 的倍数。那么，如何利用这一条性质写出能够匹配 3 的倍数的正则表达式呢？这就涉及到状态机与正则表达式的互化。 一个项目是如何诞生的的：前端项目纪实 一个项目是如何诞生的的：前端项目纪实 Tag：【前端项目纪实】 难度：⭐⭐ 编者语：技术的价值在于运用。这一篇博客记录了“校内应用年终总结数据可视化”这样一个需求从被提出到最终落地的整个开发历程。如作者所说：“我希望这个第一视角的体验能让你感受到，一个完整的前端单页面项目是怎样被设计、策划、开发出来的，中间会涉及到哪些技术、工具和流程，以及最重要的，体会到和一群有趣的人合作做一个小作品的乐趣。”这篇文章讲述了作者在大学寒假期间参与设计和开发了一个类似网易云个人年报的校内应用个性化数据年报页面的全过程。文章详细描述了从初期策划、设计稿制作、文案撰写，到前端工程开发、处理应用统计数据、利用 ECharts 绘制可视化图表，再到最后部署上线的完整过程，同时分享了在项目中收获到的经验和内心的槽点。文章内容涉及到前端技术、数据可视化等方面，适合对这些领域感兴趣的读者阅读。 如何在面试中筛选/不做一个【背题家】 如何在面试中筛选/不做一个【背题家】 Tag：【面试】【后端】 难度：⭐⭐⭐ 编者语：面临面试的同学一定不会对“面经”、“面试八股文”感到陌生。然而在这些面试的“八股问题”的背后所对应的计算机系统的设计原理我们却不见得真正理解。如作者所说：“我希望你能在日后的学习过程中更深入的了解自己所学知识，比起知道 How 和 Why，知道 Why 才是真正对许多事物有透彻理解的终点。” GUI 开发中的事件驱动机制 GUI 开发中的事件驱动机制 Tag：【GUI】【操作系统】 难度：⭐ 编者语：为什么我们编写的程序一旦所有代码执行结束就退出了？应用软件是如何接收用户所发送的信号的？这一篇博客简单介绍了这两个问题的答案。 ZFS 架构简介 ZFS 架构简介 Tag：【文件系统】 难度：⭐⭐⭐⭐⭐ 编者语：这是一篇文献阅读笔记，作者概括总结了 ZFS 文件系统的设计架构、存储数据解构等，内容非常硬核。如果你是一名电脑爱好者，那么你一定听说过ZFS。它是一种先进的文件系统，可靠性和性能都超越了传统的文件系统。在计算机存储的世界中，ZFS被誉为”存储的未来”，让人们对数据存储的理解有了一个全新的认识。 ZFS的最大特点是它的数据完整性。它使用”数据校验”技术，可以检测和修复任何文件损坏或数据丢失。同时，ZFS可以将多个磁盘组合成一个巨大的存储池，并且自动地平衡数据负载。这意味着你不必担心文件丢失或损坏，因为ZFS会自动保护你的数据。 ZFS的另一个令人兴奋的特点是它的”快照”功能。快照可以让你在不改变原始数据的情况下创建一个文件系统的副本。这是非常有用的，因为你可以使用快照来恢复之前的版本或者回到之前的状态。同时，ZFS的快照还可以用于备份、克隆和恢复。除此之外，ZFS还有许多其他的优点，如动态扩展、压缩、加密等等。它是一个非常灵活的文件系统，可以根据你的需求进行配置。因此，如果你是一名计算机爱好者，那么ZFS绝对值得一试！ JAVA 容器化指北 JAVA 容器化指北 Tag：【JAVA 应用部署】 难度：⭐⭐⭐⭐ 编者语：这是一篇 JAVA 容器化技术选型的 Cookbook 教程，简单提到了 JAVA 应用容器化时可能遇到的问题 &amp; 作者的最佳实践。 为什么 0.1+0.2 != 0.3 为什么 0.1+0.2 != 0.3 Tag：【浮点数】【计算机系统】 难度：⭐⭐ 编者语：计算机浮点数为什么不能精确表示十进制下可以精确表示的小数呢？这与计算机存储浮点数的规范有关。这一篇小品文深入浅出地讲解了数制与浮点数的存储方式、运算方式，希望这篇文章能够帮助你进一步理解计算机系统。这篇文章介绍了JavaScript中的一个奇怪问题：为什么0.1 + 0.2不等于0.3？同时，它探讨了浮点数计算标准（IEEE 754）的背景和浮点数的基本知识，以及这种问题发生的原因和解决方法。文章指出，浮点数的精度往往是有限的，而二进制无法在有限长度中精确地表示十进制中的小数，因此，几乎所有现代编程语言都会遇到这种问题，包括JavaScript、Java、Ruby、Python、Swift和Go等。最后，文章讨论了如何在开发中避免这种问题，以及在编写代码时需要注意的一些陷阱。本文适合对JavaScript开发、计算机底层知识等领域感兴趣的读者。]]></summary></entry></feed>